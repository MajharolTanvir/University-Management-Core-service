// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                   String                 @id @default(uuid())
  year                 Int
  title                String
  code                 String
  startMonth           String
  endMonth             String
  isCurrent            Boolean?               @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  students             Student[]
  semesterRegistration SemesterRegistration[]

  @@map("academic_semester")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]

  @@map("academic_department")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  academicDepartmentId               String
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  academicDepartmentId        String
  academicDepartment          AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  courseFaculties             CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  buildingId                  String
  building                    Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  courseFaculties CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId  String
  facultyId String
  course    Course  @relation(fields: [courseId], references: [id])
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculies")
}

model OfferedCourse {
  id                                 String                              @id @default(uuid())
  courseId                           String
  course                             Course                              @relation(fields: [courseId], references: [id])
  academicDepartmentId               String
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  offeredCourseSelections            OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                                 String                              @id @default(uuid())
  title                              String
  maxCapacity                        Int
  currentlyEnrolledStudent           Int                                 @default(0)
  offeredCourseId                    String
  offeredCourse                      OfferedCourse                       @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_selection")
}

model SemesterRegistration {
  id                                 String                              @id @default(uuid())
  startDate                          DateTime
  endDate                            DateTime
  status                             SemesterRegistrationStatus?         @default(UPCOMING)
  minCredit                          Int                                 @default(0)
  maxCredit                          Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  academicSemesterId                 String
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  offeredCourses                     OfferedCourse[]
  offeredCourseSelections            OfferedCourseSection[]
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester_registration")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  dayOfWeek              WeekDays             @default(SUNDAY)
  startTime              String
  endTime                String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedule")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
}

model StudentSemesterRegistrationCourse {
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])

  @@id([studentId, offeredCourseId, semesterRegistrationId])
  @@map("student_semester_registration_course")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum WeekDays {
  SATARDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
